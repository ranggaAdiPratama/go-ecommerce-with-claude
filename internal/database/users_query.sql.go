// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users_query.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteUser = `-- name: DeleteUser :exec
UPDATE users SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, username, email, password, role, created_at, updated_at, deleted_at
FROM users
WHERE
    email = $1
    AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, username, email, password, role, created_at, updated_at, deleted_at
FROM users
WHERE
    id = $1
    AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, name, username, email, password, role, created_at, updated_at, deleted_at
FROM users
WHERE
    username = $1
    AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const storeUser = `-- name: StoreUser :one
INSERT INTO
    users (
        name,
        username,
        email,
        password,
        role,
        created_at,
        updated_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        NOw(),
        NOW()
    ) RETURNING id,
    name,
    username,
    email,
    role,
    created_at,
    updated_at
`

type StoreUserParams struct {
	Name     string `json:"name"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

type StoreUserRow struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Role      string    `json:"role"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) StoreUser(ctx context.Context, arg StoreUserParams) (StoreUserRow, error) {
	row := q.db.QueryRowContext(ctx, storeUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i StoreUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    name = COALESCE(NULLIF($1::text, ''), name),
    username = COALESCE(
        NULLIF($2::text, ''),
        username
    ),
    email = COALESCE(NULLIF($3::text, ''), email),
    role = COALESCE(NULLIF($4::text, ''), role),
    password = COALESCE(
        NULLIF($5::text, ''),
        password
    ),
    updated_at = NOW()
WHERE
    id = $6 RETURNING id,
    name,
    username,
    email,
    role,
    created_at,
    updated_at
`

type UpdateUserParams struct {
	Name     string    `json:"name"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
	Role     string    `json:"role"`
	Password string    `json:"password"`
	ID       uuid.UUID `json:"id"`
}

type UpdateUserRow struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Role      string    `json:"role"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Role,
		arg.Password,
		arg.ID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userList = `-- name: UserList :many
SELECT id, name, username, email, password, role, created_at, updated_at, deleted_at FROM users
WHERE
    deleted_at IS NULL
    AND (
        NULLIF($1::text, '') IS NULL
        OR role = $1::text
    ) AND (
        NULLIF($2::text, '') IS NULL
        OR (
            name ~* $2::text
            OR username ~* $2::text
            OR email ~* $2::text
        )
    )
ORDER BY
    CASE
        WHEN $3::text = 'name' AND $4::text = 'asc' THEN name
    END ASC,
    CASE
        WHEN $3::text = 'name' AND $4::text = 'desc' THEN name
    END DESC,
    CASE
        WHEN $3::text = 'created_at' AND $4::text = 'asc' THEN created_at
    END ASC,
    CASE
        WHEN $3::text = 'created_at' AND $4::text = 'desc' THEN created_at
    END DESC,
    CASE
        WHEN $3::text = 'created_at' THEN created_at
    END ASC,
    CASE
        WHEN $3::text = 'name' THEN created_at
    END ASC,
    name DESC
LIMIT COALESCE($6::int, 15)
OFFSET COALESCE($5::int, 0)
`

type UserListParams struct {
	Role      string `json:"role"`
	Search    string `json:"search"`
	Sort      string `json:"sort"`
	SortOrder string `json:"sort_order"`
	Page      int32  `json:"page"`
	Till      int32  `json:"till"`
}

func (q *Queries) UserList(ctx context.Context, arg UserListParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, userList,
		arg.Role,
		arg.Search,
		arg.Sort,
		arg.SortOrder,
		arg.Page,
		arg.Till,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userListTotal = `-- name: UserListTotal :one
SELECT COUNT(*) AS total
FROM users
WHERE
    deleted_at IS NULL
    AND (
        NULLIF($1::text, '') IS NULL
        OR role = $1::text
    ) AND (
        NULLIF($2::text, '') IS NULL
        OR (
            name ~* $2::text
            OR username ~* $2::text
            OR email ~* $2::text
        )
    )
`

type UserListTotalParams struct {
	Role   string `json:"role"`
	Search string `json:"search"`
}

func (q *Queries) UserListTotal(ctx context.Context, arg UserListTotalParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, userListTotal, arg.Role, arg.Search)
	var total int64
	err := row.Scan(&total)
	return total, err
}
