// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens_query.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_tokens WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredRefreshTokens)
	return err
}

const deleteRevokedRefreshTokens = `-- name: DeleteRevokedRefreshTokens :exec
DELETE FROM refresh_tokens
WHERE
    is_revoked = TRUE
    AND revoked_at < NOW() - INTERVAL '30 days'
`

func (q *Queries) DeleteRevokedRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteRevokedRefreshTokens)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT
    id,
    user_id,
    token_hash,
    is_revoked,
    expires_at,
    created_at,
    revoked_at
FROM refresh_tokens
WHERE
    token_hash = $1
LIMIT 1
`

func (q *Queries) GetRefreshToken(ctx context.Context, tokenHash string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, tokenHash)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeAllUserRefreshTokens = `-- name: RevokeAllUserRefreshTokens :exec
UPDATE refresh_tokens
SET
    is_revoked = TRUE,
    revoked_at = NOW()
WHERE
    user_id = $1
    AND is_revoked = FALSE
`

func (q *Queries) RevokeAllUserRefreshTokens(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeAllUserRefreshTokens, userID)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET
    is_revoked = TRUE,
    revoked_at = NOW()
WHERE
    token_hash = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, tokenHash string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, tokenHash)
	return err
}

const storeRefreshToken = `-- name: StoreRefreshToken :one
INSERT INTO
    refresh_tokens (
        user_id,
        token_hash,
        expires_at,
        created_at
    )
VALUES ($1, $2, $3, NOW()) RETURNING id,
    user_id,
    token_hash,
    is_revoked,
    expires_at,
    created_at,
    revoked_at
`

type StoreRefreshTokenParams struct {
	UserID    uuid.UUID `json:"user_id"`
	TokenHash string    `json:"token_hash"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) StoreRefreshToken(ctx context.Context, arg StoreRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, storeRefreshToken, arg.UserID, arg.TokenHash, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.IsRevoked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.RevokedAt,
	)
	return i, err
}
